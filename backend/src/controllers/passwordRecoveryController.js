// Controlador para Recuperaci√≥n de Contrase√±a
import Cliente from "../models/Customers.js";
import bcrypt from 'bcryptjs';
import nodemailer from 'nodemailer';
import crypto from 'crypto';

const passwordRecoveryController = {};

// Configuraci√≥n del transportador de email (ajusta seg√∫n tu proveedor)
const transporter = nodemailer.createTransport({
  service: 'gmail', // o tu proveedor de email
  auth: {
    user: process.env.EMAIL_USER, // tu email
    pass: process.env.EMAIL_PASSWORD // tu contrase√±a de aplicaci√≥n
  }
});

// Funci√≥n para generar c√≥digo de 6 d√≠gitos
const generateRecoveryCode = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

// POST /api/forgot-password - Solicitar c√≥digo de recuperaci√≥n
passwordRecoveryController.forgotPassword = async (req, res) => {
  console.log('=== INICIO FORGOT PASSWORD ===');
  console.log('Body recibido:', req.body);
  
  try {
    const { correoElectronico } = req.body;
    
    if (!correoElectronico) {
      console.log('‚ùå Email no proporcionado');
      return res.status(400).json({
        success: false,
        message: 'El correo electr√≥nico es requerido'
      });
    }

    console.log('üîç Buscando usuario con email:', correoElectronico);
    
    // Buscar el usuario por email
    const usuario = await Cliente.findOne({ correoElectronico });
    
    if (!usuario) {
      console.log('‚ùå Usuario no encontrado');
      return res.status(404).json({
        success: false,
        message: 'No existe una cuenta con este correo electr√≥nico'
      });
    }

    console.log('‚úÖ Usuario encontrado:', usuario._id);

    // Generar c√≥digo de recuperaci√≥n
    const recoveryCode = generateRecoveryCode();
    const recoveryExpires = new Date(Date.now() + 15 * 60 * 1000); // Expira en 15 minutos

    console.log('üîê C√≥digo generado:', recoveryCode);
    console.log('‚è∞ Expira en:', recoveryExpires);

    // Guardar c√≥digo en el usuario
    usuario.recoveryCode = recoveryCode;
    usuario.recoveryExpires = recoveryExpires;
    await usuario.save();

    console.log('üíæ C√≥digo guardado en base de datos');

    // Configurar el email
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: correoElectronico,
      subject: 'üéÆ C√≥digo de Recuperaci√≥n de Contrase√±a - Gaming Clan',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #1a1a1a; color: white;">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #dc2626; margin-bottom: 10px;">üéÆ Gaming Clan</h1>
            <h2 style="color: white; margin-bottom: 20px;">Recuperaci√≥n de Contrase√±a</h2>
          </div>
          
          <div style="background-color: #2d2d2d; padding: 25px; border-radius: 10px; text-align: center;">
            <p style="font-size: 16px; margin-bottom: 20px;">
              Hemos recibido una solicitud para restablecer tu contrase√±a.
            </p>
            
            <div style="background-color: #dc2626; color: white; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <p style="margin: 0; font-size: 14px;">Tu c√≥digo de recuperaci√≥n es:</p>
              <h1 style="margin: 10px 0; font-size: 32px; letter-spacing: 5px; font-weight: bold;">
                ${recoveryCode}
              </h1>
            </div>
            
            <p style="font-size: 14px; color: #cccccc; margin-top: 20px;">
              Este c√≥digo expirar√° en 15 minutos por seguridad.
            </p>
            
            <p style="font-size: 14px; color: #cccccc; margin-top: 15px;">
              Si no solicitaste este cambio, puedes ignorar este correo.
            </p>
          </div>
          
          <div style="text-align: center; margin-top: 20px; padding-top: 20px; border-top: 1px solid #444;">
            <p style="font-size: 12px; color: #888;">
              Gaming Clan - Sistema de Gesti√≥n
            </p>
          </div>
        </div>
      `
    };

    console.log('üìß Enviando email...');
    
    // Enviar el email
    await transporter.sendMail(mailOptions);
    
    console.log('‚úÖ Email enviado correctamente');

    res.json({
      success: true,
      message: 'C√≥digo de recuperaci√≥n enviado a tu correo electr√≥nico'
    });

  } catch (error) {
    console.error('üí• Error en forgot password:', error);
    res.status(500).json({
      success: false,
      message: 'Error interno del servidor: ' + error.message
    });
  } finally {
    console.log('=== FIN FORGOT PASSWORD ===');
  }
};

// POST /api/reset-password - Cambiar contrase√±a con c√≥digo
passwordRecoveryController.resetPassword = async (req, res) => {
  console.log('=== INICIO RESET PASSWORD ===');
  console.log('Body recibido:', req.body);
  
  try {
    const { correoElectronico, recoveryCode, newPassword } = req.body;
    
    if (!correoElectronico || !recoveryCode || !newPassword) {
      console.log('‚ùå Datos incompletos');
      return res.status(400).json({
        success: false,
        message: 'Todos los campos son requeridos'
      });
    }

    if (newPassword.length < 6) {
      console.log('‚ùå Contrase√±a muy corta');
      return res.status(400).json({
        success: false,
        message: 'La contrase√±a debe tener al menos 6 caracteres'
      });
    }

    console.log('üîç Buscando usuario con email:', correoElectronico);
    
    // Buscar el usuario
    const usuario = await Cliente.findOne({ correoElectronico });
    
    if (!usuario) {
      console.log('‚ùå Usuario no encontrado');
      return res.status(404).json({
        success: false,
        message: 'Usuario no encontrado'
      });
    }

    console.log('‚úÖ Usuario encontrado:', usuario._id);
    console.log('üîê C√≥digo en BD:', usuario.recoveryCode);
    console.log('üîê C√≥digo recibido:', recoveryCode);
    console.log('‚è∞ C√≥digo expira:', usuario.recoveryExpires);
    console.log('‚è∞ Tiempo actual:', new Date());

    // Verificar que existe c√≥digo de recuperaci√≥n
    if (!usuario.recoveryCode || !usuario.recoveryExpires) {
      console.log('‚ùå No hay c√≥digo de recuperaci√≥n activo');
      return res.status(400).json({
        success: false,
        message: 'No hay solicitud de recuperaci√≥n activa para este usuario'
      });
    }

    // Verificar que el c√≥digo no haya expirado
    if (new Date() > usuario.recoveryExpires) {
      console.log('‚ùå C√≥digo expirado');
      // Limpiar c√≥digo expirado
      usuario.recoveryCode = undefined;
      usuario.recoveryExpires = undefined;
      await usuario.save();
      
      return res.status(400).json({
        success: false,
        message: 'El c√≥digo de recuperaci√≥n ha expirado. Solicita uno nuevo.'
      });
    }

    // Verificar que el c√≥digo sea correcto
    if (usuario.recoveryCode !== recoveryCode) {
      console.log('‚ùå C√≥digo incorrecto');
      return res.status(400).json({
        success: false,
        message: 'C√≥digo de recuperaci√≥n inv√°lido'
      });
    }

    console.log('‚úÖ C√≥digo v√°lido, cambiando contrase√±a...');

    // Encriptar la nueva contrase√±a
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(newPassword, saltRounds);

    console.log('üîê Contrase√±a encriptada');

    // Actualizar la contrase√±a y limpiar c√≥digo de recuperaci√≥n
    usuario.password = hashedPassword;
    usuario.recoveryCode = undefined;
    usuario.recoveryExpires = undefined;
    await usuario.save();

    console.log('‚úÖ Contrase√±a actualizada en base de datos');

    // Enviar email de confirmaci√≥n
    const confirmationMailOptions = {
      from: process.env.EMAIL_USER,
      to: correoElectronico,
      subject: 'üéÆ Contrase√±a Actualizada - Gaming Clan',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #1a1a1a; color: white;">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #dc2626; margin-bottom: 10px;">üéÆ Gaming Clan</h1>
            <h2 style="color: white; margin-bottom: 20px;">Contrase√±a Actualizada</h2>
          </div>
          
          <div style="background-color: #2d2d2d; padding: 25px; border-radius: 10px; text-align: center;">
            <div style="background-color: #16a34a; color: white; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h2 style="margin: 0;">‚úÖ ¬°Contrase√±a actualizada exitosamente!</h2>
            </div>
            
            <p style="font-size: 16px; margin-bottom: 20px;">
              Tu contrase√±a ha sido cambiada correctamente.
            </p>
            
            <p style="font-size: 14px; color: #cccccc;">
              Si no realizaste este cambio, contacta inmediatamente con nuestro soporte.
            </p>
          </div>
          
          <div style="text-align: center; margin-top: 20px; padding-top: 20px; border-top: 1px solid #444;">
            <p style="font-size: 12px; color: #888;">
              Gaming Clan - Sistema de Gesti√≥n
            </p>
          </div>
        </div>
      `
    };

    try {
      await transporter.sendMail(confirmationMailOptions);
      console.log('üìß Email de confirmaci√≥n enviado');
    } catch (emailError) {
      console.warn('‚ö†Ô∏è Error enviando email de confirmaci√≥n:', emailError.message);
      // No fallar si el email no se puede enviar
    }

    res.json({
      success: true,
      message: 'Contrase√±a actualizada exitosamente'
    });

  } catch (error) {
    console.error('üí• Error en reset password:', error);
    res.status(500).json({
      success: false,
      message: 'Error interno del servidor: ' + error.message
    });
  } finally {
    console.log('=== FIN RESET PASSWORD ===');
  }
};

// POST /api/resend-recovery-code - Reenviar c√≥digo de recuperaci√≥n
passwordRecoveryController.resendRecoveryCode = async (req, res) => {
  console.log('=== INICIO RESEND RECOVERY CODE ===');
  console.log('Body recibido:', req.body);
  
  try {
    const { correoElectronico } = req.body;
    
    if (!correoElectronico) {
      console.log('‚ùå Email no proporcionado');
      return res.status(400).json({
        success: false,
        message: 'El correo electr√≥nico es requerido'
      });
    }

    console.log('üîç Buscando usuario con email:', correoElectronico);
    
    const usuario = await Cliente.findOne({ correoElectronico });
    
    if (!usuario) {
      console.log('‚ùå Usuario no encontrado');
      return res.status(404).json({
        success: false,
        message: 'Usuario no encontrado'
      });
    }

    console.log('‚úÖ Usuario encontrado:', usuario._id);

    // Generar nuevo c√≥digo
    const recoveryCode = generateRecoveryCode();
    const recoveryExpires = new Date(Date.now() + 15 * 60 * 1000);

    console.log('üîê Nuevo c√≥digo generado:', recoveryCode);

    // Actualizar c√≥digo en base de datos
    usuario.recoveryCode = recoveryCode;
    usuario.recoveryExpires = recoveryExpires;
    await usuario.save();

    console.log('üíæ Nuevo c√≥digo guardado');

    // Enviar email con nuevo c√≥digo
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: correoElectronico,
      subject: 'üéÆ Nuevo C√≥digo de Recuperaci√≥n - Gaming Clan',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #1a1a1a; color: white;">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #dc2626; margin-bottom: 10px;">üéÆ Gaming Clan</h1>
            <h2 style="color: white; margin-bottom: 20px;">Nuevo C√≥digo de Recuperaci√≥n</h2>
          </div>
          
          <div style="background-color: #2d2d2d; padding: 25px; border-radius: 10px; text-align: center;">
            <p style="font-size: 16px; margin-bottom: 20px;">
              Has solicitado un nuevo c√≥digo de recuperaci√≥n.
            </p>
            
            <div style="background-color: #dc2626; color: white; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <p style="margin: 0; font-size: 14px;">Tu nuevo c√≥digo es:</p>
              <h1 style="margin: 10px 0; font-size: 32px; letter-spacing: 5px; font-weight: bold;">
                ${recoveryCode}
              </h1>
            </div>
            
            <p style="font-size: 14px; color: #cccccc;">
              Este c√≥digo expirar√° en 15 minutos.
            </p>
          </div>
        </div>
      `
    };

    console.log('üìß Enviando nuevo c√≥digo por email...');
    
    await transporter.sendMail(mailOptions);
    
    console.log('‚úÖ Nuevo c√≥digo enviado');

    res.json({
      success: true,
      message: 'Nuevo c√≥digo enviado a tu correo electr√≥nico'
    });

  } catch (error) {
    console.error('üí• Error en resend recovery code:', error);
    res.status(500).json({
      success: false,
      message: 'Error interno del servidor: ' + error.message
    });
  } finally {
    console.log('=== FIN RESEND RECOVERY CODE ===');
  }
};

export default passwordRecoveryController;